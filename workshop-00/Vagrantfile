# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  #config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

  # https://app.vagrantup.com/centos/boxes/7
  #config.vm.box = "centos/7"
  config.vm.box = "centos/7.5.1804"
  #config.vm.define "vag-ansible-local-dev-1"

  config.vm.provider "virtualbox" do |v|
    v.customize ["modifyvm", :id, "--natnet1", "10.20.30/24"]
  end

  #config.ssh.username = 'root'
  #config.ssh.password = 'vagrant'
  #config.ssh.insert_key = true

  #
  # for compatibility with expected ansible inventory directory layout
  #
  #system("
  #    if [ #{ARGV[0]} = 'up' ]; then
  #        echo 'You are doing vagrant up and can execute your script'
  #        GROUP_VARS_DIR=${1:-../../../inventories/vagrant/group_vars}
  #        ln -fs ${GROUP_VARS_DIR} .vagrant/provisioners/ansible/group_vars
  #    fi
  #")

  config.vm.provision "shell", inline: <<-SHELL
    #yum -y update
  SHELL

  # https://www.vagrantup.com/docs/provisioning/ansible.html
  # https://www.vagrantup.com/docs/provisioning/ansible_intro.html
  # https://www.vagrantup.com/docs/provisioning/ansible_common.html
  #config.vm.provision "ansible_local" do |ansible|
  config.vm.provision "ansible" do |ansible|

    ansible.playbook = "site.yml"

    ansible.become = true
    #ansible.become_user = "root"
    #ansible.become_method = "sudo"
    #ansible.become_flags = "-s"
    
    #ansible.vault_password_file = ".vault-pass"
    ansible.raw_arguments = ["-e", "@vault.yml", "--vault-password-file", ".vault-pass"]

    #ansible.groups = {
    #  "grp1" => ["vag-ansible-local-dev-1"],
    #  "grp2" => ["vag-ansible-local-dev-2"],
    #}

    ansible.verbose = "vv"
    #ansible.raw_arguments  = [
    #  "-vv --diff"
    #]

    ansible.host_vars = {
      "all" => {
        "nodename": "vag-ansible-local-dev-1"
      }
    }
  end

end
